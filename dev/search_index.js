var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Taichi","category":"page"},{"location":"#Taichi.jl","page":"Home","title":"Taichi.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Taichi.jl is a thin wrapper around Taichi. It is built upon two packages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"PythonCall.jl which makes Julia & Python easily interoperable.\nJl2Py.jl which transpiles Julia code to Python.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The general workflow is as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"||==========||                 ||==========||                 ||==========||\n||  Julia   ||    Taichi.jl    ||  Python  ||      Taichi     ||  Taichi  ||\n||          ||                 ||          || (via PythonCall)||          ||\n||  kernel  ||   ===========>  ||  kernel  ||   ===========>  ||  kernel  ||\n||==========||                 ||==========||                 ||==========||","category":"page"},{"location":"","page":"Home","title":"Home","text":"There is a language-agnostic Taichi IR called Chi under development. After Chi becomes stable, we will switch to directly transpilation from Julia AST to Chi IR.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Taichi.jl is very simple to use. The Python module taichi is exported as a constant ti. Then you can call most functions exactly the same way as in Python.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For wrapping kernel functions, two macros are exported, namely, @ti_func and @ti_kernel. The typical usage is to put the macro in front of an anonymous function, then assign it to a variable.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Following is a Julian adaptation of the \"Julia set\" example. Take caution that Python boolean values cannot be directly used in Julia, and we need to use helper functions like pytruth and pyeq. More examples can be seen in examples.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Taichi\n\nlet\n    ti.init(; arch=ti.gpu)\n    n = 640\n    pixels = ti.Vector.field(3; dtype=pytype(1.0), shape=(n * 2, n))\n\n    paint = @ti_kernel (t::Float64) -> for (i, j) in pixels\n        c = ti.Vector([-0.8, ti.cos(t) * 0.2])\n        z = ti.Vector([i / n - 1, j / n - 0.5]) * 2\n        rgb = ti.Vector([0, 1, 1])\n        iterations = 0\n        while z.norm() < 20 && iterations < 50\n            z = ti.Vector([z[0]^2 - z[1]^2, z[0] * z[1] * 2]) + c\n            iterations += 1\n            pixels[i, j] = (1 - iterations * 0.02) * rgb\n        end\n    end\n\n    gui = ti.GUI(\"Julia Set\"; res=(n * 2, n))\n    i = 0\n    flag = 0\n    while pytruth(gui.running)\n        if flag == 0\n            i -= 1\n            if i * 0.02 <= 0.2\n                flag = 1\n            end\n        else\n            i += 1\n            if i * 0.02 > (Ï€ * 1.2)\n                flag = 0\n            end\n        end\n\n        paint(i * 0.02)\n        gui.set_image(pixels)\n        gui.show()\n    end\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Screenshot of the example above:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Julia Set)","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Taichi]","category":"page"},{"location":"#Taichi.@ti_func-Tuple{Any}","page":"Home","title":"Taichi.@ti_func","text":"Wrap the given function into a Taichi func.\n\n\n\n\n\n","category":"macro"},{"location":"#Taichi.@ti_kernel-Tuple{Any}","page":"Home","title":"Taichi.@ti_kernel","text":"Wrap the given function into a Taichi kernel.\n\n\n\n\n\n","category":"macro"}]
}
